#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class Stack {
    Node* top;  // pointer to the top of stack

public:
    Stack() {
        top = nullptr;
    }

    // Push element onto stack
    void push(int val) {
        Node* newNode = new Node(val);
        newNode->next = top;
        top = newNode;
    }

    // Pop element from stack
    void pop() {
        if (top == nullptr) {
            cout << "Stack Underflow\n";
            return;
        }
        Node* temp = top;
        cout << "Popped: " << temp->data << endl;
        top = top->next;
        delete temp;
    }

    // Peek top element
    int peek() {
        if (top == nullptr) {
            cout << "Stack is empty\n";
            return -1;
        }
        return top->data;
    }

    // Check if stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Display stack
    void display() {
        Node* temp = top;
        cout << "Stack: ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};
class Queue {
    Node* front;  // points to front element
    Node* rear;   // points to rear element

public:
    Queue() {
        front = rear = nullptr;
    }

    // Insert element in queue
    void enqueue(int val) {
        Node* newNode = new Node(val);
        if (rear == nullptr) {
            front = rear = newNode;
            return;
        }
        rear->next = newNode;
        rear = newNode;
    }

    // Remove element from queue
    void dequeue() {
        if (front == nullptr) {
            cout << "Queue Underflow\n";
            return;
        }
        Node* temp = front;
        cout << "Dequeued: " << temp->data << endl;
        front = front->next;

        if (front == nullptr) rear = nullptr;
        delete temp;
    }

    // Peek front element
    int peek() {
        if (front == nullptr) {
            cout << "Queue is empty\n";
            return -1;
        }
        return front->data;
    }

    // Check if queue is empty
    bool isEmpty() {
        return front == nullptr;
    }

    // Display queue
    void display() {
        Node* temp = front;
        cout << "Queue: ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};
int main() {
    // Stack demo
    Stack st;
    st.push(10);
    st.push(20);
    st.push(30);
    st.display();
    cout << "Top element: " << st.peek() << endl;
    st.pop();
    st.display();

    // Queue demo
    Queue q;
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.display();
    cout << "Front element: " << q.peek() << endl;
    q.dequeue();
    q.display();

    return 0;
}
